Server is running on port \\.\pipe\59c5eaa1-c836-46a5-85a4-448a4a398384.
query {}
Executing (default): IF OBJECT_ID('[Users]', 'U') IS NULL CREATE TABLE [Users] ([id] INTEGER NOT NULL IDENTITY(1,1) , [username] NVARCHAR(255) NOT NULL UNIQUE, [password] NVARCHAR(255) NOT NULL, [deviceId] NVARCHAR(255) NULL, [status] INTEGER NULL, [createdAt] DATETIMEOFFSET NOT NULL, [updatedAt] DATETIMEOFFSET NOT NULL, PRIMARY KEY ([id]));
Executing (default): SELECT [id], [rackBarcodeSerial], [binBarcodeSerial], [materialBarcodeSerial], [mrcDateTime], [briotDateTime], [userId], [scanStatus], [createdAt], [updatedAt] FROM [putaways] AS [putaway] WHERE [putaway].[scanStatus] = 0;
Executing (default): EXEC sys.sp_helpindex @objname = N'[Users]';
{"message":"- - - [21/Jul/2020:11:32:34 +0000] \"GET /putaways HTTP/1.1\" 200 3743 \"-\" \"PostmanRuntime/7.26.1\"\n","level":"info"}
Executing (default): IF OBJECT_ID('[putaways]', 'U') IS NULL CREATE TABLE [putaways] ([id] INTEGER NOT NULL IDENTITY(1,1) , [rackBarcodeSerial] NVARCHAR(255) NOT NULL, [binBarcodeSerial] NVARCHAR(255) NOT NULL, [materialBarcodeSerial] NVARCHAR(255) NOT NULL, [mrcDateTime] NVARCHAR(255) NULL, [briotDateTime] NVARCHAR(255) NULL, [userId] NVARCHAR(255) NOT NULL, [scanStatus] NVARCHAR(255) NULL, [createdAt] DATETIMEOFFSET NOT NULL, [updatedAt] DATETIMEOFFSET NOT NULL, PRIMARY KEY ([id]));
Executing (default): EXEC sys.sp_helpindex @objname = N'[putaways]';
Executing (default): IF OBJECT_ID('[pickings]', 'U') IS NULL CREATE TABLE [pickings] ([id] INTEGER NOT NULL IDENTITY(1,1) , [rackBarcodeSerial] NVARCHAR(255) NOT NULL, [binBarcodeSerial] NVARCHAR(255) NOT NULL, [materialBarcodeSerial] NVARCHAR(255) NOT NULL, [mrcDateTime] NVARCHAR(255) NULL, [briotDateTime] NVARCHAR(255) NULL, [userId] NVARCHAR(255) NOT NULL, [scanStatus] NVARCHAR(255) NULL, [createdAt] DATETIMEOFFSET NOT NULL, [updatedAt] DATETIMEOFFSET NOT NULL, PRIMARY KEY ([id]));
Executing (default): EXEC sys.sp_helpindex @objname = N'[pickings]';
Executing (default): IF OBJECT_ID('[materialinwards]', 'U') IS NULL CREATE TABLE [materialinwards] ([id] INTEGER NOT NULL IDENTITY(1,1) , [sapCode] NVARCHAR(255) NULL UNIQUE, [oldCode] NVARCHAR(255) NULL, [finish] NVARCHAR(255) NULL, [desc] NVARCHAR(255) NULL, [custPart] NVARCHAR(255) NULL, [qtyOfPack] NVARCHAR(255) NULL, [packCode] NVARCHAR(255) NULL, [unitWeight] NVARCHAR(255) NULL, [netWeight] NVARCHAR(255) NULL, [grossWeight] NVARCHAR(255) NULL, [refNumber] NVARCHAR(255) NULL, [packDate] NVARCHAR(255) NULL, [printDate] NVARCHAR(255) NULL, [packNumber] NVARCHAR(255) NULL, [userId] NVARCHAR(255) NULL, [DateTimeBriot] NVARCHAR(255) NULL, [createdAt] DATETIMEOFFSET NOT NULL, [updatedAt] DATETIMEOFFSET NOT NULL, PRIMARY KEY ([id]));
Executing (default): EXEC sys.sp_helpindex @objname = N'[materialinwards]';
Executing (default): IF OBJECT_ID('[audits]', 'U') IS NULL CREATE TABLE [audits] ([id] INTEGER NOT NULL IDENTITY(1,1) , [sapCode] NVARCHAR(255) NULL UNIQUE, [oldCode] NVARCHAR(255) NULL, [finish] NVARCHAR(255) NULL, [desc] NVARCHAR(255) NULL, [custPart] NVARCHAR(255) NULL, [qtyOfPack] NVARCHAR(255) NULL, [packCode] NVARCHAR(255) NULL, [unitWeight] NVARCHAR(255) NULL, [netWeight] NVARCHAR(255) NULL, [grossWeight] NVARCHAR(255) NULL, [refNumber] NVARCHAR(255) NULL, [packDate] NVARCHAR(255) NULL, [printDate] NVARCHAR(255) NULL, [packNumber] NVARCHAR(255) NULL, [userId] NVARCHAR(255) NULL, [DateTimeBriot] NVARCHAR(255) NULL, [createdAt] DATETIMEOFFSET NOT NULL, [updatedAt] DATETIMEOFFSET NOT NULL, PRIMARY KEY ([id]));
Executing (default): EXEC sys.sp_helpindex @objname = N'[audits]';
Executing (default): IF OBJECT_ID('[transactions]', 'U') IS NULL CREATE TABLE [transactions] ([id] INTEGER NOT NULL IDENTITY(1,1) , [rackBarcodeSerial] NVARCHAR(255) NULL, [binBarcodeSerial] NVARCHAR(255) NULL, [materialBarcodeSerial] NVARCHAR(255) NULL, [transactionType] NVARCHAR(255) NULL, [DateTimeBriot] NVARCHAR(255) NULL, [userId] NVARCHAR(255) NULL, [scanStatus] NVARCHAR(255) NULL, [createdAt] DATETIMEOFFSET NOT NULL, [updatedAt] DATETIMEOFFSET NOT NULL, PRIMARY KEY ([id]));
Executing (default): EXEC sys.sp_helpindex @objname = N'[transactions]';
Executing (default): SELECT [id], [username], [password], [deviceId], [status], [createdAt], [updatedAt] FROM [Users] AS [User];
{"message":"- - - [21/Jul/2020:11:32:52 +0000] \"GET /users HTTP/1.1\" 200 168 \"-\" \"PostmanRuntime/7.26.1\"\n","level":"info"}
{
  username: 'test123',
  password: 'test@123',
  deviceId: '20083521400925'
}
user {
  username: 'test123',
  password: 'test@123',
  deviceId: '20083521400925',
  status: 1
}
Executing (default): INSERT INTO [Users] ([username],[password],[deviceId],[status],[createdAt],[updatedAt]) OUTPUT INSERTED.* VALUES (@0,@1,@2,@3,@4,@5);
User {
  dataValues: {
    id: 3,
    username: 'test123',
    password: 'test@123',
    deviceId: '20083521400925',
    status: 1,
    updatedAt: 2020-07-21T11:33:42.599Z,
    createdAt: 2020-07-21T11:33:42.599Z
  },
  _previousDataValues: {
    username: 'test123',
    password: 'test@123',
    deviceId: '20083521400925',
    status: 1,
    id: 3,
    createdAt: 2020-07-21T11:33:42.599Z,
    updatedAt: 2020-07-21T11:33:42.599Z
  },
  _changed: {
    username: false,
    password: false,
    deviceId: false,
    status: false,
    id: false,
    createdAt: false,
    updatedAt: false
  },
  _modelOptions: {
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: false,
    paranoid: false,
    rejectOnEmpty: false,
    whereCollection: {},
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: {},
    indexes: [],
    name: { plural: 'Users', singular: 'User' },
    omitNull: false,
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MssqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: {}
    },
    hooks: {}
  },
  _options: {
    isNewRecord: true,
    _schema: null,
    _schemaDelimiter: '',
    attributes: undefined,
    include: undefined,
    raw: undefined,
    silent: undefined
  },
  isNewRecord: false
}
{"message":"- - - [21/Jul/2020:11:33:42 +0000] \"POST /users HTTP/1.1\" 200 168 \"-\" \"PostmanRuntime/7.26.1\"\n","level":"info"}
Executing (default): SELECT [id], [username], [password], [deviceId], [status], [createdAt], [updatedAt] FROM [Users] AS [User];
{"message":"- - - [21/Jul/2020:11:34:45 +0000] \"GET /users HTTP/1.1\" 200 337 \"-\" \"PostmanRuntime/7.26.1\"\n","level":"info"}
{"message":"- - - [21/Jul/2020:11:35:32 +0000] \"GET / HTTP/1.1\" 304 - \"-\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36\"\n","level":"info"}
{"message":"- - - [21/Jul/2020:11:36:08 +0000] \"POST /putaways/7 HTTP/1.1\" 404 150 \"-\" \"PostmanRuntime/7.26.1\"\n","level":"info"}
{
  username: 'test1234',
  password: 'test@1234',
  deviceId: '200835214009251'
}
user {
  username: 'test1234',
  password: 'test@1234',
  deviceId: '200835214009251',
  status: 1
}
Executing (default): INSERT INTO [Users] ([username],[password],[deviceId],[status],[createdAt],[updatedAt]) OUTPUT INSERTED.* VALUES (@0,@1,@2,@3,@4,@5);
User {
  dataValues: {
    id: 4,
    username: 'test1234',
    password: 'test@1234',
    deviceId: '200835214009251',
    status: 1,
    updatedAt: 2020-07-21T11:37:34.399Z,
    createdAt: 2020-07-21T11:37:34.399Z
  },
  _previousDataValues: {
    username: 'test1234',
    password: 'test@1234',
    deviceId: '200835214009251',
    status: 1,
    id: 4,
    createdAt: 2020-07-21T11:37:34.399Z,
    updatedAt: 2020-07-21T11:37:34.399Z
  },
  _changed: {
    username: false,
    password: false,
    deviceId: false,
    status: false,
    id: false,
    createdAt: false,
    updatedAt: false
  },
  _modelOptions: {
    timestamps: true,
    validate: {},
    freezeTableName: false,
    underscored: false,
    paranoid: false,
    rejectOnEmpty: false,
    whereCollection: {},
    schema: null,
    schemaDelimiter: '',
    defaultScope: {},
    scopes: {},
    indexes: [],
    name: { plural: 'Users', singular: 'User' },
    omitNull: false,
    sequelize: Sequelize {
      options: [Object],
      config: [Object],
      dialect: [MssqlDialect],
      queryInterface: [QueryInterface],
      models: [Object],
      modelManager: [ModelManager],
      connectionManager: [ConnectionManager],
      importCache: {}
    },
    hooks: {}
  },
  _options: {
    isNewRecord: true,
    _schema: null,
    _schemaDelimiter: '',
    attributes: undefined,
    include: undefined,
    raw: undefined,
    silent: undefined
  },
  isNewRecord: false
}
{"message":"- - - [21/Jul/2020:11:37:34 +0000] \"POST /users HTTP/1.1\" 200 171 \"-\" \"PostmanRuntime/7.26.1\"\n","level":"info"}
Executing (default): SELECT [id], [username], [password], [deviceId], [status], [createdAt], [updatedAt] FROM [Users] AS [User];
{"message":"- - - [21/Jul/2020:11:37:55 +0000] \"GET /users HTTP/1.1\" 200 509 \"-\" \"PostmanRuntime/7.26.1\"\n","level":"info"}
